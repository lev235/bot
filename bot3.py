import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = 'YOUR_BOT_TOKEN'
ADMIN_IDS = [123456789]  # ID –∞–¥–º–∏–Ω–æ–≤

WEBHOOK_HOST = 'https://your-render-url.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WB_API_URL = "https://search.wb.ru/exactmatch/ru/common/v5/search"

GOOGLE_CREDENTIALS_FILE = 'credentials.json'
SPREADSHEET_NAME = 'WBPriceBot'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
Bot.set_current(bot)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
SHEET = client.open(SPREADSHEET_NAME).sheet1

# ======================= –ö–æ–º–∞–Ω–¥—ã =======================

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –∞—Ä—Ç–∏–∫—É–ª Wildberries, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π /add")

@dp.message_handler(commands=['add'])
async def add_product(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
    dp.register_message_handler(process_article, state="waiting_article")

async def process_article(message: types.Message):
    article = message.text.strip()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (‚ÇΩ):")
    dp.register_message_handler(lambda m: process_price(m, article), state="waiting_price")
    dp.current_state(user=message.from_user.id).set_state("waiting_price")

async def process_price(message: types.Message, article):
    try:
        price = float(message.text.strip())
        SHEET.append_row([str(message.from_user.id), article, price, '', ''])
        await message.answer(f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {article} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π {price} ‚ÇΩ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message_handler(commands=['list'])
async def list_products(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        records = SHEET.get_all_records()
        user_products = [f"{r['article']} ‚Äî —Ü–µ–ª—å: {r['target_price']} ‚ÇΩ (—Ç–µ–∫—É—â–∞—è: {r['last_price']} ‚ÇΩ)"
                         for r in records if r['user_id'] == user_id]
        if user_products:
            await message.answer("üìã –¢–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã:\n" + '\n'.join(user_products))
        else:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    except Exception as e:
        logging.error(f"/list –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")

@dp.message_handler(commands=['remove'])
async def remove_product(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")
    dp.register_message_handler(process_remove, state="waiting_remove")
    dp.current_state(user=message.from_user.id).set_state("waiting_remove")

async def process_remove(message: types.Message):
    article = message.text.strip()
    user_id = str(message.from_user.id)
    try:
        all_rows = SHEET.get_all_values()
        for idx, row in enumerate(all_rows[1:], start=2):
            if row[0] == user_id and row[1] == article:
                SHEET.delete_row(idx)
                await message.answer(f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {article} —É–¥–∞–ª—ë–Ω.")
                return
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"/remove –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(commands=['ping'])
async def ping(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# ======================= –ê–¥–º–∏–Ω-—Ä–∞—Å—Å—ã–ª–∫–∞ =======================

@dp.message_handler(commands=['broadcast'])
async def broadcast_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç / —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ / –≤–∏–¥–µ–æ), –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")
    dp.register_message_handler(handle_broadcast, content_types=types.ContentTypes.ANY, state="waiting_broadcast")
    dp.current_state(user=message.from_user.id).set_state("waiting_broadcast")

async def handle_broadcast(message: types.Message):
    try:
        users = list({r[0] for r in SHEET.get_all_values()[1:] if r[0]})
        sent = 0
        for user_id in users:
            try:
                if message.video:
                    await bot.send_video(user_id, message.video.file_id, caption=message.caption or "")
                elif message.photo:
                    await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "")
                elif message.text:
                    await bot.send_message(user_id, message.text)
                sent += 1
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")

# ======================= –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω =======================

async def check_prices_loop():
    await asyncio.sleep(5)
    while True:
        try:
            records = await asyncio.to_thread(SHEET.get_all_records)
            for idx, rec in enumerate(records, start=2):
                try:
                    user_id = int(rec['user_id'])
                    article = rec['article']
                    target = float(rec['target_price'])

                    params = {"nm": article}
                    async with aiohttp.ClientSession() as session:
                        async with session.get(WB_API_URL, params=params, timeout=10) as resp:
                            if resp.status != 200:
                                continue
                            data = await resp.json()
                            current = data["data"]["products"][0]["priceU"] / 100

                    if current <= target:
                        await bot.send_message(user_id, f"üìâ –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {article} —É–ø–∞–ª–∞ –¥–æ {current} ‚ÇΩ (—Ü–µ–ª—å: {target} ‚ÇΩ)")

                    await asyncio.to_thread(SHEET.update, f"D{idx}:E{idx}", [[current, datetime.utcnow().isoformat()]])
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ {idx}: {e}")
        except Exception as e:
            logging.critical(f"[Loop] –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        await asyncio.sleep(1800)  # 30 –º–∏–Ω

# ======================= –í–µ–±—Ö—É–∫ =======================

from aiohttp import web

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(check_prices_loop())

async def on_shutdown(dp):
    logging.warning("Shutting down...")
    await bot.delete_webhook()

app = web.Application()
from aiogram.contrib.middlewares.logging import LoggingMiddleware
dp.middleware.setup(LoggingMiddleware())

app.router.add_post(WEBHOOK_PATH, lambda request: dp.process_updates(request))
app.router.add_get("/ping", lambda request: web.Response(text="pong"))

if __name__ == '__main__':
    from aiogram import executor
    executor.set_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        app=app,
    )