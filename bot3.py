import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/webhook
ADMIN_ID = int(os.getenv("ADMIN_ID"))

SPREADSHEET_NAME = 'wb_tracker'
GOOGLE_CREDS_JSON = 'credentials.json'

# === Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDS_JSON, scope)
gc = gspread.authorize(creds)
sheet = gc.open(SPREADSHEET_NAME).sheet1

# === Telegram setup ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫"))

user_state = {}
broadcast_state = {}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å WB ===
def get_price(nm):
    url = f'https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1257786&spp=0&nm={nm}'
    try:
        resp = requests.get(url)
        data = resp.json()
        products = data.get('data', {}).get('products')
        if products:
            item = products[0]
            priceU = item.get('priceU', 0)
            saleU = item.get('salePriceU', priceU)
            return priceU // 100, saleU // 100
    except:
        return None, None
    return None, None

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=main_kb)

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def handle_add(message: types.Message):
    user_state[message.from_user.id] = {'step': 'await_artikel'}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (nm ID —Å Wildberries):")

@dp.message(lambda m: user_state.get(m.from_user.id, {}).get('step') == 'await_artikel')
async def handle_artikel(message: types.Message):
    user_state[message.from_user.id]['artikel'] = message.text.strip()
    user_state[message.from_user.id]['step'] = 'await_price'
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–æ —Å–∫–∏–¥–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(lambda m: user_state.get(m.from_user.id, {}).get('step') == 'await_price')
async def handle_price(message: types.Message):
    try:
        target = float(message.text.strip())
    except:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    data = user_state[message.from_user.id]
    sheet.append_row([message.from_user.id, data['artikel'], target, '', 'FALSE'])
    user_state.pop(message.from_user.id, None)
    await message.answer(f"–¢–æ–≤–∞—Ä {data['artikel']} —Å —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π ‚â§ {target}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_kb)

@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫")
async def handle_list(message: types.Message):
    rows = sheet.get_all_records()
    markup = InlineKeyboardMarkup(row_width=2)
    items = []
    for idx, r in enumerate(rows, start=2):
        if int(r['UserID']) == message.from_user.id:
            items.append(f"üì¶ {r['Artikel']} ‚Üí ‚â§ {r['TargetPrice']}‚ÇΩ (–ø–æ—Å–ª.: {r['LastPrice'] or '‚Äì'})")
            markup.insert(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{idx}"))
            markup.insert(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{idx}"))
    if not items:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
    else:
        await message.answer("\n".join(items), reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("del_"))
async def handle_delete(callback: types.CallbackQuery):
    idx = int(callback.data.split('_')[1])
    sheet.delete_rows(idx)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ.")
    await callback.message.delete()

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def handle_edit(callback: types.CallbackQuery):
    idx = int(callback.data.split('_')[1])
    row = sheet.row_values(idx)
    user_state[callback.from_user.id] = {'step': 'edit_price', 'row_idx': idx, 'artikel': row[1]}
    await callback.answer()
    await callback.message.answer(f"–ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è {row[1]} (—Ç–µ–∫—É—â–∞—è: {row[2]}‚ÇΩ):")

@dp.message(lambda m: user_state.get(m.from_user.id, {}).get('step') == 'edit_price')
async def handle_edit_price(message: types.Message):
    try:
        price = float(message.text.strip())
    except:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    data = user_state.pop(message.from_user.id)
    sheet.update_cell(data['row_idx'], 3, price)
    sheet.update_cell(data['row_idx'], 5, 'FALSE')
    await message.answer("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_kb)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω ===
async def check_prices():
    rows = sheet.get_all_records()
    for i, row in enumerate(rows, start=2):
        user_id = row['UserID']
        artikel = row['Artikel']
        target = float(row['TargetPrice'])
        notified = row['Notified'] == 'TRUE'
        base_price, _ = get_price(artikel)
        if base_price is None:
            continue
        sheet.update_cell(i, 4, base_price)
        if base_price <= target and not notified:
            url = f"https://www.wildberries.ru/catalog/{artikel}/detail.aspx"
            try:
                await bot.send_message(user_id, f"üîî –¢–æ–≤–∞—Ä {artikel} –ø–æ–¥–µ—à–µ–≤–µ–ª –¥–æ {base_price}‚ÇΩ\n{url}")
                sheet.update_cell(i, 5, 'TRUE')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞: {e}")
        elif base_price > target and notified:
            sheet.update_cell(i, 5, 'FALSE')

# === aiohttp —Å–µ—Ä–≤–µ—Ä ===
app = web.Application()

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle_webhook(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

# –ü–∏–Ω–≥ –¥–ª—è UptimeRobot
async def handle_ping(request):
    return web.Response(text="I am alive!")

app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/ping", handle_ping)

# === –ó–∞–ø—É—Å–∫ ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_prices, "interval", minutes=1)
    scheduler.start()
    logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

async def on_shutdown(app):
    await bot.delete_webhook()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω.")

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, port=int(os.getenv("PORT", 8080)))